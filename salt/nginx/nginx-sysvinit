#!/bin/sh

### BEGIN INIT INFO
# Provides:           nginx
# Required-Start:     $local_fs $remote_fs $network $syslog $named
# Required-Stop:      $local_fs $remote_fs $network $syslog $named
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  nginx LSB init script
# Description:        nginx Linux Standards Base compliant init script.
### END INIT INFO

# -----------------------------------------------------------------------------
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or distribute
# this software, either in source code form or as a compiled binary, for any
# purpose, commercial or non-commercial, and by any means.
#
# In jurisdictions that recognize copyright laws, the author or authors of this
# software dedicate any and all copyright interest in the software to the
# public domain. We make this dedication for the benefit of the public at large
# and to the detriment of our heirs and successors. We intend this dedication
# to be an overt act of relinquishment in perpetuity of all present and future
# rights to this software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# nginx Linux Standards Base compliant init script.
#
# SEE: https://wiki.debian.org/LSBInitScripts
# SEE: http://paste.ubuntu.com/6918156/
# SEE: http://tldp.org/LDP/abs/html/exitcodes.html
#
# IDEAS BY:   Karl Blessing <http://kbeezie.com/debian-ubuntu-nginx-init-script/>
# AUTHOR:     Richard Fussenegger <richard@fussenegger.info>
# COPYRIGHT:  2013-15 Richard Fussenegger
# LICENSE:    http://unlicense.org/ PD
# LINK:       http://richard.fussenegger.info/
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
#                                                                     Variables
# -----------------------------------------------------------------------------


# The name of the daemon.
readonly NAME=nginx

# Arguments that should be passed to the executable.
readonly DAEMON_ARGS=

# Absolute path to the PID file.
readonly PIDFILE="/run/${NAME}.pid"

# Will be set by /lib/init/vars.sh
VERBOSE=no


# -----------------------------------------------------------------------------
#                                                                   Error Codes
# -----------------------------------------------------------------------------


readonly EC_SUPER_USER_ONLY=64
readonly EC_DAEMON_NOT_FOUND=65
readonly EC_RELOADING_FAILED=66
readonly EC_RESTART_STOP_FAILED=67
readonly EC_RESTART_START_FAILED=68
readonly EC_START_FAILED=69
readonly EC_STOP_FAILED=70
readonly EC_INVALID_ARGUMENT=71


# -----------------------------------------------------------------------------
#                                                                     Functions
# -----------------------------------------------------------------------------


# Exit the script with an error code.
die()
{
    log_end_msg ${1}
    exit ${1}
}

# End the script.
end()
{
    [ "${VERBOSE}" != no ] && log_end_msg 0 || exit 0
}

# Display failure message.
fail()
{
    log_failure_msg "${NAME}" "${1}"
}

# Display informational message.
info()
{
    [ "${VERBOSE}" != no ] && log_daemon_msg "${NAME}" "${1}"
}

# Display success message.
ok()
{
    [ "${VERBOSE}" != no ] && log_success_msg "${NAME}" "${1}"
}

###
# Reloads the service.
#
# RETURN:
#   0 - successfully reloaded
#   1 - reloading failed
###
reload_service()
{
    start-stop-daemon --stop --signal HUP ${SSD_OPTIONS}
}

###
# Starts the service.
#
# RETURN:
#   0 - successfully started
#   1 - starting failed
###
start_service()
{
    start-stop-daemon --start ${SSD_OPTIONS} -- ${DAEMON_ARGS}
}

###
# Stops the service.
#
# RETURN:
#   0 - successfully stopped
#   1 - stopping failed
###
stop_service()
{
    start-stop-daemon --stop --retry=TERM/30/KILL/5 ${SSD_OPTIONS}
}


# -----------------------------------------------------------------------------
#                                                                      Includes
# -----------------------------------------------------------------------------


# Load the VERBOSE setting and other rcS variables.
. /lib/init/vars.sh

# Load the LSB log_* functions.
. /lib/lsb/init-functions


# -----------------------------------------------------------------------------
#                                                                     Bootstrap
# -----------------------------------------------------------------------------


# This script is only accessible for root (sudo).
if [ $(id -u) -ne 0 ]
then
    fail 'super user only!'
    exit ${EC_SUPER_USER_ONLY}
fi

# Check if daemon is a recognized program and get absolute path.
readonly DAEMON=$(command -v "${NAME}")
if [ "${DAEMON}" = '' ]
then
    fail 'not found!'
    exit ${EC_DAEMON_NOT_FOUND}
fi

# Default options for start-stop-daemon command.
readonly SSD_OPTIONS="--quiet --oknodo --pidfile ${PIDFILE} --exec ${DAEMON} --name ${NAME}"

# Determine the service's status.
#
#   0 = Program is running
#   1 = Program is not running and the PID file exists.
#   3 = Porgram is not running.
#   4 = Unable to determine status.
start-stop-daemon --status ${SSD_OPTIONS} 2>/dev/null 1>/dev/null
readonly STATUS=${?}


# -----------------------------------------------------------------------------
#                                                                  Handle Input
# -----------------------------------------------------------------------------


case "${1}" in

    force-reload|reload)
        if [ ${STATUS} -eq 0 ]
        then
            info 'reloading configuration ...'
            reload_service && end || die ${EC_RELOADING_FAILED}
        else
            fail 'not running!'
        fi
    ;;

    restart)
        if [ ${STATUS} -eq 0 ]
        then
            info 'restarting service ...'
            stop_service || die ${EC_RESTART_STOP_FAILED}
            sleep 0.1
            start_service && end || die ${EC_RESTART_START_FAILED}
        else
            fail 'not running!'
        fi
    ;;

    start)
        if [ ${STATUS} -eq 0 ]
        then
            ok 'already started.'
        else
            info 'starting ...'
            start_service && end || die ${EC_START_FAILED}
        fi
    ;;

    status)
        status_of_proc "${DAEMON}" "${NAME}" || exit ${?}
    ;;

    stop)
        if [ ${STATUS} -eq 0 ]
        then
            info 'stopping ...'
            stop_service && end || die ${EC_STOP_FAILED}
        else
            info 'already stopped.'
        fi
    ;;

    *)
        printf -- 'Usage: %s {force-reload|reload|restart|start|status|stop}\n' \
            $(cd -- "$(dirname -- "${0}")"; pwd)/$(basename -- "${0}") >&2
        exit ${EC_INVALID_ARGUMENT}
    ;;

esac

exit 0
